
线程                     进程
pthread_create         fork  vfork
pthread_exit           exit
pthread_join           wait  waitpid
pthread_cleanup_push   atexit
pthread_cleanup_pop

int pthread_equal(pthread_t tid1,pthread_t tid2);
pthread_t pthread_self(void);

int pthread_create(pthread_t &tid,pthread_attr_t *attr,void *(*start_int)(void *),void *arg)
int pthread_exit(void *arg)
int pthread_join(pthread_t tid,void **arg)

请求取消同一进程的其它线程
int pthread_cancel(pthread_t tid)  成功返回0 失败返回错误码
使得tid线程行为如同调用了参数PTHREAD_CANCELED 的pthread_exit函数 但线程可以 忽略取消方式 或 控制取消方式

线程退出时可以调用安排好的退出清理程序(类似于atexit)
void pthread_cleanup_push(void (*rtn)(void *),void *arg);
void pthread_cleanup_pop(int execute);
当执行以下动作时调用清理函数
  .调用pthread_exit
  .响应取消请求
  .execute非零调用pop
  
pop无论数为不为0都将清push的清理函数,由于实现原因 两都必须配对使用

使线程进入分离状态,分离的线程退出时,底层资源会立即回收
int pthread_detach(pthread_t tid);
====================================

线程属性 
1.线程的分离状态属性  
2.线程的栈未尾警戒缓冲区大小  
3.线程栈最低地址 
4.线程栈大小

int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_destroy(pthread_attr_t *attr);

int pthread_attr_getdetachstate(pthread_attr_t *attr,int *detachstate);
int pthread_attr_setdetachstate(pthread_attr_t *attr,int detachstate);

detachstate: PTHREAD_CREATE_DETACHED
             PTHREAD_CREATE_JOINABLE   正常启动,可能通过pthread_join 获取终止状态

指定stack大小不能小于
#define PTHREAD_STACK_MIN       16384			 

int pthread_attr_getstack(const pthread_attr_t *attr,
                          void **stackaddr,void*size);

int pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr,int size);

如果想改变栈的大小又不想自己处理线程栈的问题 使用pthread_attr_setstacksize
int pthread_attr_getstacksize(const pthread_attr_t *attr,size_t *stacksize);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);

线程属性guardsize控制着线程未尾之后用于避免溢出的扩展内存大小
int pthread_attr_getguardsize(pthread_attr_t *attr,size_t *guardsize);
int pthread_attr_setguardsize(pthread_attr_t *attr,size_t guardsize);


线程的取消选项:
.可取消状态   
   PTHREAD_CANCEL_ENABLE
   PTHREAD_CANCEL_DISABLE
   
   pthread_setcancelstate
   
.可取消类型
   .延迟取消(调用pthread_cancel并不会立即终止线程,而是继续运行,达到某个取消点时才终止)
    PTHREAD_CANCEL_DEFERRED
   .导步取消(线程可以在任何时间取消)
    PTHREAD_CANCEL_ASYNCHRONOUS
  pthread_setcanceltype	
	
设置取消点
  pthread_testcancel


查询与修改线程的并发度
int pthread_getconcurrency(void);
int pthread_setconcurrency(int new_level);

线程的同步
  .互斥量 pthread_mutex_t
   pthread_mutex_init
   pthread_mutex_destroy

   pthread_mutex_lock
   pthread_mutex_trylock
   pthread_mutex_unlokc   
  
  .读写锁  pthread_rwlock_t
  pthread_rwlock_init
  pthread_rwlock_destroy
  
  pthread_rwlock_rdlock
  pthread_rwlock_wrlock
  pthread_rwlock_unlock
  
  pthread_rwlock_tryrdlock
  pthread_rwlock_trywrlock
  
  .条件变量  pthread_cond_t
  pthread_cond_init
  pthread_cond_destroy
  
  pthread_cond_wait
  pthread_cond_timedwait
  
  pthread_cond_signal
  pthread_cond_broadcast

==========================================
线程的私有数据:
  在分配线程私有数据之前,需要创建与该数据关联的键,这个键将用于获取对线程私有数据的访问
  int pthread_key_create(pthread_key_t *keyp,void (*del_func)(void *))
  int pthread_key_delete(pthread_key_t *key)
  
  pthread_getspecific
  pthread_setspecific
  
对于多个线程都要执行的操作,但该操作只需要做一次的动作可以用pthread_once
  pthread_once_t  initflag=PTHREAD_ONCE_INIT
  pthread_once(pthread_once_t *initflag,void (*do_once_work)(void))

 int pthread_sigmask(int how,sigset_t &set,sigset_t oldset)  

注：注意重入函数和不可得入函数

