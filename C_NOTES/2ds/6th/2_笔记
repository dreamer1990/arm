

1.typeof关键字

    typeof是一个关键字  作用是返回变量的类型

    应用场景:
    
    #define swap(a, b) \
	    do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)


    示例2:
        int a = 3;
        typeof(a) b = 33;
        与以下等价

        int a = 3;
        int b = 33;



2. offsetof宏计算结构体成员的偏移量

    //size_t 是unsigned long类型的别名
    typedef unsigned long size_t

    //TYPE是结构体的类型
    //MEMBER是结构体中的成员
    #define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)

3. container_of宏根据结构体中的成员的地址计算出结构体的首地址

    /**
     * container_of - cast a member of a structure out to the containing structure
     * @ptr:	the pointer to the member.
     * @type:	the type of the container struct this is embedded in.
     * @member:	the name of the member within the struct.
     *
     */
    //ptr   结构体成员的地址
    //type  结构体类型
    //member结构体中的成员
    #define container_of(ptr, type, member) ({			\
    	const typeof( ((type *)0)->member ) *__mptr = (ptr);	\
    	(type *)( (char *)__mptr - offsetof(type,member) );})


4. 内核链表的结构体

    在内核源代码中 linx-3.5/include/linux/types.h

    内核链表的结构体定义如下:
     
    //next是后继指针
    //prev是前驱指针
    struct list_head {
	    struct list_head *next, *prev;
    };


5. 项目
    学生选课系统


    功能和结构体定义如下:


    #define my_scanf(err_op, format, ...)	do {    \
    		int __ret__;                            \
    		__ret__ = scanf(format, ##__VA_ARGS__); \
    		while (getchar() != '\n')               \
    			;                                   \
    		if (0 == __ret__)                       \
    			err_op;                             \
    	} while (0)
    
    #define my_fgets(buf, size)    do {             \
    			fgets(buf, size, stdin);            \
    			if (buf[strlen(buf) - 1] == '\n')   \
    				buf[strlen(buf) - 1] = '\0';    \
    			else                                \
    			{                                   \
    				while (getchar() != '\n')	    \
    					;                           \
    			}                                   \
    		} while (0)
    
    #define offsetof(type, field) \
    			((unsigned long)&((type *)0)->field)
    
    #define container_of(ptr, type, field) \
    		((type *)(((void *)ptr) - offsetof(type, field)))
    



    struct k_node_t {
    	struct k_node_t *prev;
    	struct k_node_t *next;
    };
    
    //尾插
    void k_list_add(struct k_node_t *h, struct k_node_t *n)
    {
    	n->next = h;
    	n->prev = h->prev;
    	n->prev->next = n;
    	n->next->prev = n;
    }
    
    struct stu_t {
    	int  id;
    	char name[32];
    	char sex;
    	struct k_node_t s_ent;
    	struct k_node_t i_ent;
    };
    
    struct course_t {
    	int  id;
    	char name[64];
    	struct k_node_t c_ent;
    	struct k_node_t i_ent;
    };
    
    struct item_t {
    	struct course_t *c;
    	struct stu_t *s;
    	struct k_node_t i_c_ent;
    	struct k_node_t i_s_ent;
    };
    

    主要功能如下:

		printf("======> 1. 添加课程       <======\n");	
		printf("======> 2. 添加学生       <======\n");	
		printf("======> 3. 显示课程       <======\n");	
		printf("======> 4. 显示学生       <======\n");	
		printf("======> 5. 根据学生查课表 <======\n");	
		printf("======> 6. 根据课表查学生 <======\n");	
		printf("======> 7. 退出           <======\n");	
		printf(">>> 请选择操作: ");






