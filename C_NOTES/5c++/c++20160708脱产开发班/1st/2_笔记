 1. 数据类型与表达式

	数据类型	基本类型	整型	短整型(short int)
							        整型(int) 
							        长整型(long int)
						    字符型(char)
						    浮点型	单精度型(float)
							        双精度型(double)
							        长双精度型(long double)

						    布尔型(bool)

				构造类型	枚举类型(enum)
						    数组类型
						    结构体类型(struct)
						    共用体类型(union)
						    类类型(class)
				指针类型
				引用类型
				空类型(void)

2. C++的运算符

    C++的运算符十分丰富，使得C++的运算十分灵活方便。例如把赋值号(=)也作为运算符处理，这样，a=b=c=4就是合法的表达式，这是与其他语言不同的。C++提供了以下运算符：

    (1) 算术运算符
    	+(加)-(减) *(乘) /(除)  %(整除求余)++(自加) --(自减)
    (2) 关系运算符
    	>(大于) <(小于)  ==(等于) >=(大于或等于) <=(小于或等于) !=(不等于)
    
    (３) 逻辑运算符 
    	＆＆(逻辑与) ||(逻辑或)  ！(逻辑非)

    (４) 位运算符 
    	<<(按位左移)  >>(按位右移)  ＆(按位与)  |(按位或)     ∧(按位异或)  ~(按位取反)

    (５) 赋值运算符 (＝及其扩展赋值运算符)
    (６) 条件运算符 (?:)
    (７) 逗号运算符 (，)
    (８) 指针运算符 (*)
    (9)  引用运算符和地址运算符 (＆)
    (10) 求字节数运算符（sizeof）
    (11) 强制类型转换运算符（ (类型) 或类型( )）
    (12) 成员运算符 （.）
    (13) 指向成员的运算符 （->）
    (14) 下标运算符 （［ ］）
    (15) 其他 （如函数调用运算符（））

    强制类型转换的一般形式为
    （类型名）（表达式）
    注意： 如果要进行强制类型转换的对象是一个变量，该变量可以不用括号括起来。如果要进行强制类型转换的对象是一个包含多项的表达式，则表达式应该用括号括起来。
    
    C++把它保留了下来，以利于兼容。C++还增加了以下形式： 
    类型名（表达式）
    如int(x)  或 int(x+y)
    类型名不加括号，而变量或表达式用括号括起来。这种形式类似于函数调用。但许多人仍习惯于用第一种形式，把类型名包在括号内，这样比较清楚。
    需要说明的是在强制类型转换时，得到一个所需类型的中间变量，但原来变量的类型未发生变化。


3. C++程序
	
    一个程序包含一个或多个程序单位(每个程序单位构成一个程序文件)。每一个程序单位由以下几个部分组成： 
    (1) 预处理命令。如#include命令和#define命令。
    (2) 声明部分。例如对数据类型和函数的声明，以及对变量的定义。
    (3) 函数。包括函数首部和函数体，在函数体中可以包含若干声明语句和执行语句。



4. C++语句

	4.1 声明语句
	如int a,b;在C语言中，只有产生实际操作的才称为语句，对变量的定义不作为语句，而且要求对变量的定义必须出现在本块中所有程序语句之前。因此C程序员已经养成了一个习惯： 在函数或块的开头位置定义全部变量。在C++中，对变量(以及其他对象)的定义被认为是一条语句，并且可以出现在函数中的任何行，即可以放在其他程序语句可以出现的地方，也可以放在函数之外。这样更加灵活，可以很方便地实现变量的局部化(变量的作用范围从声明语句开始到本函数或本块结束)。

	4.2  执行语句
	通知计算机完成一定的操作。执行语句包括： 
    (1) 控制语句，完成一定的控制功能。C++有9种控制语句，即
        ① if( )~else~            （条件语句）
        ② for( )~                （循环语句）
        ③ while( )~              （循环语句）
        ④ do~while（ ）          （循环语句）
        ⑤ continue               （结束本次循环语句）
        ⑥ break                  （中止执行switch循环语句）
        ⑦ switch                 （多分支选择语句）
        ⑧ goto                   （转向语句）
        ⑨ return                 （从函数返回语句）


    (2) 函数和流对象调用语句。函数调用语句由一次函数调用加一个分号构成一个语句，例如
        sort(x, y, z);                  //假设已定义了sort函数，它有3个参数
        cout << x << endl;                 //流对象调用语句

    (3) 表达式语句。由一个表达式加一个分号构成一个语句。最典型的是： 由赋值表达式构成一个赋值语句。
        i = i + 1  //是一个赋值表达式
        i = i + 1; //是一个赋值语句
    任何一个表达式的最后加一个分号都可以成为一个语句。一个语句必须在最后出现分号。
    表达式能构成语句是C和C++语言的一个重要特色。C++程序中大多数语句是表达式语句（包括函数调用语句）。


    4.3  空语句
    下面是一个空语句：
    ；
    即只有一个分号的语句，它什么也不做。有时用来做被转向点，或循环语句中的循环体。


    4.4  复合语句
    可以用 { }把一些语句括起来成为复合语句。如下面是一个复合语句。
    { 
        z = x + y;
        if(z > 100)     
            z = z - 100；
        cout << z;
    }
    注意：复合语句中最后一个语句中最后的分号不能省略。
    在本章中将介绍几种顺序执行的语句，在执行这些语句的过程中不会发生流程的控制转移。

    4.5 赋值语句
    前面已介绍，赋值语句是由赋值表达式加上一个分号构成。

    (1)C++的赋值语句具有其他高级语言的赋值语句的功能。但不同的是： C++中的赋值号“=”是一个运算符，可以写成
    a = b = c = d;
    而在其他大多数语言中赋值号不是运算符，上面的写法是不合法的。
    
    (2) 关于赋值表达式与赋值语句的概念。在C++中，赋值表达式可以包括在其他表达式之中，例如
    if((a = b) > 0) cout << ″a > 0″ << endl；
    按语法规定if后面的( )内是一个条件。现在在x的位置上换上一个赋值表达式“a=b”，其作用是：先进行赋值运算（将b的值赋给a），然后判断a是否大于0，如大于0，执行cout<<″a>0″<<endl；。在if语句中的“a=b”不是赋值语句而是赋值表达式，这样写是合法的。不能写成
    if((a = b;) > 0) cout << ″a > 0″ << endl；
    因为在if的条件中不能包含赋值语句。C++把赋值语句和赋值表达式区别开来，增加了表达式的种类，能实现其他语言中难以实现的功能。
    

5. C++输入输出

	输入和输出并不是C++语言中的正式组成成分。C和C++本身都没有为输入和输出提供专门的语句结构。输入输出不是由C++本身定义的，而是在编译系统提供的I/O库中定义的。
	C++的输出和输入是用“流”(stream)的方式实现的。

	有关流对象cin、cout和流运算符的定义等信息是存放在C++的输入输出流库中的，因此如果在程序中使用cin、cout和流运算符，就必须使用预处理命令把头文件stream包含到本文件中： 
	#include <iostream>
	尽管cin和cout不是C++本身提供的语句，但是在不致混淆的情况下，为了叙述方便，常常把由cin和流提取运算符“>>”实现输入的语句称为输入语句或cin语句，把由cout和流插入运算符“<<”实现输出的语句称为输出语句或cout语句。根据C++的语法，凡是能实现某种操作而且最后以分号结束的都是语句。

	5.1 输入流与输出流的基本操作

	cout语句的一般格式为
	    cout << 表达式1 << 表达式2 << …… << 表达式n;

	cin语句的一般格式为
    	cin >> 变量1 >> 变量2 >> …… >> 变量n;

	在定义流对象时，系统会在内存中开辟一段缓冲区，用来暂存输入输出流的数据。在执行cout语句时，先把插入的数据顺序存放在输出缓冲区中，直到输出缓冲区满或遇到cout语句中的endl(或′＼n′，ends，flush)为止，此时将缓冲区中已有的数据一起输出，并清空缓冲区。输出流中的数据在系统默认的设备(一般为显示器)输出。


    一个cout语句可以分写成若干行。如
    cout << ″This is a simple C++ program.″ << endl;

    可以写成 
    cout << ″This is ″              //注意行末尾无分号
     << ″a C++ ″
     << ″program.″
     << endl;                         //语句最后有分号

    也可写成多个cout语句，即
    cout << ″This is ″;             //语句末尾有分号
    cout << ″a C++ ″;
    cout << ″program.″;
    cout << endl;
    以上3种情况的输出均为
    This is a simple C++ program.


    注意 不能用一个插入运算符“<<”插入多个输出项：
    cout << a, b, c;                //错误，不能一次插入多项
    cout << a + b + c;                //正确，这是一个表达式，作为一项
    在用cout输出时，用户不必通知计算机按何种类型输出，系统会自动判别输出数据的类型，使输出的数据按相应的类型输出。如已定义a为int型，b为float型，c为char型，则
    cout << a << ′ ′ << b << ′ ′ << c << endl;
    会以下面的形式输出：
    4 345.789 a


    与cout类似，一个cin语句可以分写成若干行。如
    cin >> a >> b >> c >> d;
    可以写成
      cin >> a                   //注意行末尾无分号  
          >> b                   //这样写可能看起来清晰些
          >> c
          >> d;              
    也可以写成
    cin >> a;
    cin >> b;
    cin >> c;
    cin >> d;
    以上3种情况均可以从键盘输入： 1  2  3  4 ↙
    也可以分多行输入数据：
    1↙
    2  3↙
    4↙
    在用cin输入时，系统也会根据变量的类型从输入流中提取相应长度的字节。如有
    char c1,c2;
    int a;
    float b;
    cin >> c1 >> c2 >> a >> b;
    如果输入
    1234 56.78↙
    注意： 34后面应该有空格以便和56.78分隔开。也可以按下面格式输入：
    1 2 34 56.78↙                (在1和2之间有空格)
    不能用cin语句把空格字符和回车换行符作为字符输入给字符变量，它们将被跳过。如果想将空格字符或回车换行符(或任何其他键盘上的字符)输入给字符变量，可以用getchar函数。
    在组织输入流数据时，要仔细分析cin语句中变量的类型，按照相应的格式输入，否则容易出错。
    
    5.2 用getchar和putchar 函数进行字符的输入和输出
    
    5.3 用scanf和printf函数进行输入和输出
    

6. 在输入流与输出流中使用控制符

    上面介绍的是使用cout和cin时的默认格式。但有时人们在输入输出时有一些特殊的要求，如在输出实数时规定字段宽度，只保留两位小数，数据向左或向右对齐等。C++提供了在输入输出流中使用的控制符(有的书中称为操纵符)
需要注意的是： 如果使用了控制符，在程序单位的开头除了要加iostream头文件外，还要加iomanip头文件。

    举例： 输出双精度数。
    
    double a = 123.456789012345; //对a赋初值
    (1) cout << a; 输出： 123.456  
    (2) cout << setprecision(9) << a; 输出： 123.456789  
    (3) cout << setprecision(6); 恢复默认格式(精度为6)
    (4) cout <<  setiosflags(ios∷fixed); 输出： 123.456789
    (5) cout << setiosflags(ios∷fixed) << setprecision(8) << a; 输出： 123.45678901
    (6) cout << setiosflags(ios∷scientific) << a; 输出： 1.234568e+02
    (7) cout << setiosflags(ios∷scientific) << setprecision(4) << a; 输出： 1.2346e02
    下面是整数输出的例子： 
    int b = 123456;对b赋初值
    (1) cout << b;输出： 123456
    (2) cout << hex << b; 输出： 1e240     
    (3) cout << setiosflags(ios∷uppercase) << b;输出： 1E240     
    (4) cout << setw(10) << b << ′,′ << b; 输出：     123456，123456
    (5) cout << setfill(′*′) << setw(10) << b;输出： **** 123456
    (6) cout << setiosflags(ios∷showpos) << b;输出： +123456
    

7. 关系运算和逻辑运算
    在高级语言中称为关系表达式，其中“>”是一个比较符，称为关系运算符。
    C++的关系运算符有： 
    ① <   	(小于)        
    ② <=  	(小于或等于)		优先级相同 (高)
    ③ >   	(大于)        
    ④ >=  	(大于或等于)   	
    ⑤ ==  	(等于) 
    ⑥ ！=  (不等于)  		优先级相同 (低)


    关于优先次序：
    ① 前4种关系运算符（<，<＝，>，>＝）的优先级别相同，后两种也相同。前4种高于后两种。例如，“>”优先于“＝＝”。而“>”与“<”优先级相同。
    ② 关系运算符的优先级低于算术运算符。
    ③ 关系运算符的优先级高于赋值运算符。
    例如：
        c > a + b          等效于 c>(a+b)
        a > b == c         等效于(a>b)==c
        a == b < c         等效于a==(b<c)
        a = b > c          等效于a=(b>c)
    用关系运算符将两个表达式连接起来的式子，称为关系表达式。关系表达式的一般形式可以表示为
    表达式  关系运算符 表达式
    其中的“表达式”可以是算术表达式或关系表达式、逻辑表达式、赋值表达式、字符表达式。例如，下面都是合法的关系表达式：
    a>b, a+b>b+c，(a==3)>(b==5), ′a′<′b′, (a>b)>(b<c)

    关系表达式的值是一个逻辑值，即“真”或“假”。例如，关系表达式“5==3”的值为“假”，“5>=0”的值为“真”。在C和C++中都用数值1代表“真”，用0代表“假”。
    如果有以下赋值表达式：
    d=a>b       则d得到的值为1
    f=a>b>c     f得到的值为0


8. 逻辑常量和逻辑变量

    C语言没有提供逻辑型数据，关系表达式的值(真或假)分别用数值1和0代表。C++增加了逻辑型数据。逻辑型常量只有两个，即false(假)和true(真)。
    逻辑型变量要用类型标识符bool来定义，它的值只能是true和false之一。如
    bool found,flag=false;       //定义逻辑变量found和flag，并使flag的初值为false
    found=true;                  //将逻辑常量true赋给逻辑变量found

    由于逻辑变量是用关键字bool来定义的，因此又称为布尔变量。逻辑型常量又称为布尔常量。所谓逻辑型，就是布尔型。
    
    在编译系统处理逻辑型数据时，将false处理为0，将true处理为1。因此，逻辑型数据可以与数值型数据进行算术运算。
    如果将一个非零的整数赋给逻辑型变量，则按“真”处理，如
    flag=123;                      //赋值后flag的值为true
    cout<<flag;
    输出为数值1。


9. 逻辑运算和逻辑表达式
    有时只用一个关系表达式还不能正确表示所指定的条件。
    C++提供3种逻辑运算符：
    (1) &&  逻辑与            (相当于其他语言中的AND)
    (2) ||  逻辑或            (相当于其他语言中的OR）
    (3) !   逻辑非            (相当于其他语言中的NOT)
    逻辑运算举例如下：
    a && b   若a,b为真，则a && b为真。
    a||b     若a,b之一为真，则a||b为真。
    !a       若a为真，则!a为假。


    在一个逻辑表达式中如果包含多个逻辑运算符，按以下的优先次序：
    (1) !（非）→ &&（与）→ ||（或），即“!”为三者中最高的。
    (2) 逻辑运算符中的“&&”和“||”低于关系运算符，“!”高于算术运算符。
    例如：
        (a>b) && (x>y)                    可写成 a>b && x>y
        (a==b) || (x==y)                 可写成 a==b || x==y
        (!a) || (a>b)                     可写成 !a || a>b
    将两个关系表达式用逻辑运算符连接起来就成为一个逻辑表达式，上面几个式子就是逻辑表达式。逻辑表达式的一般形式可以表示为
    表达式  逻辑运算符 表达式

    逻辑表达式的值是一个逻辑量“真”或“假”。前面已说明，在给出逻辑运算结果时，以数值1代表“真”，以0代表“假”，但在判断一个逻辑量是否为“真”时，采取的标准是： 如果其值是0就认为是“假”，如果其值是非0就认为是“真”。例如：
    (1) 若a=4，则!a的值为0。因为a的值为非0，被认作“真”，对它进行“非”运算，得“假”，“假”以0代表。
    (2) 若a=4,b=5，则a && b的值为1。因为a和b均为非0，被认为是“真” 。
    (3) a,b值同前，a-b||a+b的值为1。因为a-b和a+b的值都为非零值。
    (4) a,b值同前，!a || b的值为1。
    (5) 4 && 0 || 2 的值为1。
    


10. 选择结构  

    选择结构 if语句
    多分支选择结构和switch 语句
    
    条件运算符和条件表达式
    max=(a>b)?a：b;  
    其中“(a>b)?a：b”是一个“条件表达式”。它是这样执行的：如果(a>b)条件为真，则条件表达式的值就取“?”后面的值，即条件表达式的值为ａ，否则条件表达式的值为“：”后面的值，即b。
    
    条件表达式的一般形式为
    表达式1 ? 表达式2 ∶表达式3
    条件运算符的执行顺序是：先求解表达式1，若为非0（真）则求解表达式2，此时表达式２的值就作为整个条件表达式的值。


11. 循环结构
    循环结构和循环语句

12. 函数

    12.1 函数的分类
    	
    从用户使用的角度看，函数有两种：
    (1) 系统函数，即库函数。这是由编译系统提供的，用户不必自己定义这些函数，可以直接使用它们。
    (2) 用户自己定义的函数。用以解决用户的专门需要。

    从函数的形式看，函数分两类：
    (1) 无参函数。调用函数时不必给出参数。
    (2) 有参函数。在调用函数时，要给出参数。在主调函数和被调用函数之间有数据传递。
    
    
    12.2 内联函数
    调用函数时需要一定的时间和空间的开销
    
    C++提供一种提高效率的方法，即在编译时将所调用函数的代码直接嵌入到主调函数中，而不是将流程转出去。这种嵌入到主调函数中的函数称为内置函数(inline function)，又称内嵌函数。在有些书中把它译成内联函数。
    指定内置函数的方法很简单，只需在函数首行的左端加一个关键字inline即可。
    
    注意： 可以在声明函数和定义函数时同时写inline，也可以只在其中一处声明inline，效果相同，都能按内置函数处理。
    使用内置函数可以节省运行时间，但却增加了目标程序的长度。因此一般只将规模很小(一般为5个语句以下)而使用频繁的函数(如定时采集数据的函数)声明为内置函数。
    
    内置函数中不能包括复杂的控制语句，如循环语句和switch语句。
    应当说明： 对函数作inline声明，只是程序设计者对编译系统提出的一个建议，也就是说它是建议性的，而不是指令性的。并非一经指定为inline，编译系统就必须这样做。编译系统会根据具体情况决定是否这样做。
    归纳起来，只有那些规模较小而又被频繁调用的简单函数，才适合于声明为inline函数。
    
    
    
13. 函数的重载
    
    在编程时，有时我们要实现的是同一类的功能，只是有些细节不同。例如希望从3个数中找出其中的最大者，而每次求最大数时数据的类型不同，可能是3个整数、3个双精度数或3个长整数。程序设计者往往会分别设计出3个不同名的函数，其函数原型为：
    int max1(int a，int b, int c);              //求3个整数中的最大者
    double max2(double a，double b，double c);  //求3个双精度数中最大者
    long  max3(long a，long b，long c);      //求3个长整数中的最大者

    C++允许用同一函数名定义多个函数，这些函数的参数个数和参数类型不同。这就是函数的重载(function overloading)。即对一个函数名重新赋予它新的含义，使一个函数名可以多用。
    
    参数的个数和类型可以都不同。但不能只有函数的类型不同而参数的个数和类型相同。
    
    在使用重载函数时，同名函数的功能应当相同或相近，不要用同一函数名去实现完全不相干的功能，虽然程序也能运行，但可读性不好，使人莫名其妙。
    
    
14. 函数的模板
    
    C++提供了函数模板(function template)。所谓函数模板，实际上是建立一个通用函数，其函数类型和形参类型不具体指定，用一个虚拟的类型来代表。这个通用函数就称为函数模板。凡是函数体相同的函数都可以用这个模板来代替，不必定义多个函数，只需在模板中定义一次即可。在调用函数时系统会根据实参的类型来取代模板中的虚拟类型，从而实现了不同函数的功能。
    
    定义函数模板的一般形式为 
    template < typename T>  或  template <class T>
    通用函数定义                          通用函数定义
    
    示例：
    #include <iostream>
    using namespace std;
    template<typename T>        //模板声明，其中T为类型参数
    T max(T a,T b,T c)          //定义一个通用函数，用T作虚拟的类型名
    {if(b>a) a=b;
     if(c>a) a=c;
     return a;
    }
    
    int main( )
    {
        int i1=185,i2=-76,i3=567,i;
        double d1=56.87,d2=90.23,d3=-3214.78,d;
        long g1=67854,g2=-912456,g3=673456,g;
        i=max(i1,i2,i3);          //调用模板函数，此时T被int取代
        d=max(d1,d2,d3);          //调用模板函数，此时T被double取代
        g=max(g1,g2,g3);          //调用模板函数，此时T被long取代
     cout<<″i_max=″<<i<<endl;
     cout<<″f_max=″<<f<<endl;
     cout<<″g_max=″<<g<<endl;
     return 0;
    }
    
    
    
    类型参数可以不只一个，可以根据需要确定个数。如
    template <class T1,typename T2>
    可以看到，用函数模板比函数重载更方便，程序更简洁。但应注意它只适用于函数的参数个数相同而类型不同，且函数体相同的情况，如果参数的个数不同，则不能用函数模板。



15. 有默认参数的函数

    一般情况下，在函数调用时形参从实参那里取得值，因此实参的个数应与形参相同。有时多次调用同一函数时用同样的实参，C++提供简单的处理办法，给形参一个默认值，这样形参就不必一定要从实参取值了。如有一函数声明
    float area(float r = 6.5);
    指定r的默认值为6.5，如果在调用此函数时，确认r的值为6.5，则可以不必给出实参的值，如
    area( ); //相当于area(6.5);
    如果不想使形参取此默认值，则通过实参另行给出。如
    
    area(7.5);    //形参得到的值为7.5，而不是6.5
    这种方法比较灵活，可以简化编程，提高运行效率。

    如果有多个形参，可以使每个形参有一个默认值，也可以只对一部分形参指定默认值，另一部分形参不指定默认值。如有一个求圆柱体体积的函数，形参h代表圆柱体的高，r为圆柱体半径。函数原型如下：
    float volume(float h,float r=12.5);          //只对形参r指定默认值12.5
    函数调用可以采用以下形式： 
    volume(45.6);                                //相当于volume(45.6,12.5)
    volume(34.2,10.4)                            //h的值为34.2，r的值为10.4
    实参与形参的结合是从左至右顺序进行的。因此指定默认值的参数必须放在形参表列中的最右端，否则出错。
    
    void f1(float a, int b=0, int c, char d=′a′);     //不正确
    void f2(float a，int c，int b=0, char d=′a′);     //正确
    如果调用上面的f2函数，可以采取下面的形式： 
    f2(3.5, 5, 3, ′x′)                  //形参的值全部从实参得到
    f2(3.5, 5, 3)                      //最后一个形参的值取默认值′a′
    f2(3.5, 5)                         //最后两个形参的值取默认值，b=0,d=′a′

    可以看到，在调用有默认参数的函数时，实参的个数可以与形参的个数不同，实参未给定的，从形参的默认值得到值。利用这一特性，可以使函数的使用更加灵活。
    
    在使用带有默认参数的函数时有两点要注意：
    (1) 如果函数的定义在函数调用之前，则应在函数定义中给出默认值。如果函数的定义在函数调用之后，则在函数调用之前需要有函数声明，此时必须在函数声明中给出默认值，在函数定义时可以不给出默认值(如例4.8)。
    (2) 一个函数不仅既作为重载函数，又作为有默认参数的函数。因为当调用函数时如果少写一个参数，系统无法判定是利用重载函数还是利用默认参数的函数，出现二义性，系统无法执行。
    

16. 函数的嵌套调用和函数的递归调用

17. 函数的局部变量和全局变量

18. 变量的存储类别

19. 数组

    19.1 数组的概念
    19.2 一维数组的引用与初始化
    19.3 二维数组的定义和引用
    19.4 数组与函数的关系
    19.5 字符数组


20. C++处理字符串的方法——字符串类与字符串变量

    用字符数组来存放字符串并不是最理想和最安全的方法。
    C++提供了一种新的数据类型——字符串类型(string类型)，在使用方法上，它和char、int类型一样，可以用来定义变量，这就是字符串变量——用一个名字代表一个字符序列。
    实际上，string并不是C++语言本身具有的基本类型，它是在C++标准库中声明的一个字符串类，用这种类可以定义对象。每一个字符串变量都是string类的一个对象。
    
    
    20.1 定义字符串变量

    和其他类型变量一样，字符串变量必须先定义后使用，定义字符串变量要用类名string。如
    string string1；                    //定义string1为字符串变量
    string string2=″China″;             //定义string2同时对其初始化

    应当注意： 要使用string类的功能时，必须在本文件的开头将C++标准库中的string头文件包含进来，即应加上
    #include <string>                    //注意头文件名不是string.h
    
    20.2 对字符串变量的赋值
    在定义了字符串变量后，可以用赋值语句对它赋予一个字符串常量，如
    string1=″Canada″;

    既可以用字符串常量给字符串变量赋值，也可以用一个字符串变量给另一个字符串变量赋值。如 
    string2=string1;                //假设string2和string1均已定义为字符串变量

    不要求string2和string1长度相同，假如string2原来是″China″，string1原来是″Canada″，赋值后string2也变成″Canada″。在定义字符串变量时不需指定长度，长度随其中的字符串长度而改变。
    可以对字符串变量中某一字符进行操作，如 
    string word=″Then″;           //定义并初始化字符串变量word
    word[2]=′a′; //修改序号为2的字符，修改后word的值为″Than″
    
    
    20.3 字符串变量的输入输出
    可以在输入输出语句中用字符串变量名，输入输出字符串，如
    cin >> string1;                 //从键盘输入一个字符串给字符串变量string1
    cout << string2;                //将字符串string2输出
    
    20.4 字符串变量的运算
    在以字符数组存放字符串时，字符串的运算要用字符串函数，如strcat(连接)、strcmp(比较)、strcpy(复制)，而对string类对象，可以不用这些函数，而直接用简单的运算符。
    (1) 字符串复制用赋值号
    string1=string2;
    其作用与“strcpy(string1,string2);”相同。
    (2) 字符串连接用加号
    string string1=″C++″;                   //定义string1并赋初值
    string string2=″Language″;               //定义string2并赋初值
    string1=string1 + string2;               //连接string1和string2
    连接后string1为″C++ Language″。
    
    (3) 字符串比较直接用关系运算符
    可以直接用 ==(等于)、>(大于)、<(小于)、!=(不等于)、>=(大于或等于)、<=(小于或等于)等关系运算符来进行字符串的比较。
    使用这些运算符比使用5.5.5节中介绍的字符串函数直观而方便。
    
    20.5 字符串数组
    不仅可以用string定义字符串变量，也可以用string定义字符串数组。如
    string name［5］;             //定义一个字符串数组，它包含5个字符串元素
    string name［5］={″Zhang″,″Li″,″Fun″,″Wang″,″Tan″}; 
    //定义一个字符串数组并初始化
    
    可以看到： 
    (1) 在一个字符串数组中包含若干个(现为5个)元素，每个元素相当于一个字符串变量。
    (2) 并不要求每个字符串元素具有相同的长度，即使对同一个元素而言，它的长度也是可以变化的，当向某一个元素重新赋值，其长度就可能发生变化。
    (3) 在字符串数组的每一个元素中存放一个字符串，而不是一个字符，这是字符串数组与字符数组的区别。如果用字符数组存放字符串，一个元素只能存放一个字符，用一个一维字符数组存放一个字符串。
    (4) 每一个字符串元素中只包含字符串本身的字符而不包括′＼0′。
    
    
    归纳起来，C++对字符串的处理有两种方法： 一种是用字符数组的方法，这是C语言采取的方法，  一般称为Cstring方法；一种是用string类定义字符串变量，称为string方法。显然，string方法概念清楚，使用方便，最好采用这种方法。C++保留C-string方法主要是为了与C兼容，使以前用C写的程序能用于C++环境。
    

21. 指针
6.1  指针的概念
6.2  变量与指针
6.3  数组与指针
6.4  字符串与指针
6.5  函数与指针
6.6  返回指针值的函数
6.7  指针数组和指向指针的指针
6.8  有关指针的数据类型和指针运算的小结


22. 引用

    对一个数据可以使用“引用”(reference)，这是C++对C的一个重要扩充，引用是一种新的变量类型，它的作用是为一个变量起一个别名。假如有一个变量a，想给它起一个别名b，可以这样写： 
    int a;                       //定义a是整型变量
    int &b=a;                    //声明b是a的引用
    以上语句声明了b是a的引用，即b是a的别名。经过这样的声明后，a或b的作用相同，都代表同一变量。
    
    注意： 在上述声明中，&是引用声明符，并不代表地址。不要理解为“把a的值赋给b的地址”。声明变量b为引用类型，并不需要另外开辟内存单元来存放b的值。b和a占内存中的同一个存储单元，它们具有同一地址。声明b是a的引用，可以理解为： 使变量b具有变量a的地址。见图6.26，如果a的值是20，则b的值也是20。
    
    
    在声明一个引用类型变量时，必须同时使之初始化，即声明它代表哪一个变量。在声明变量b是变量a的引用后，在它们所在函数执行期间，该引用类型变量b始终与其代表的变量a相联系，不能再作为其他变量的引用(别名)。下面的用法不对： 
    int  a1, a2;
    int  &b = a1;
    int  &b = a2;                //企图使b又变成a2的引用（别名）是不行的
    
    22.1 引用作为函数参数
    
    有了变量名，为什么还需要一个别名呢？C++之所以增加引用类型， 主要是把它作为函数参数，以扩充函数传递数据的功能。 
    到目前为止，本书介绍过函数参数传递的两种情况。
    (1) 将变量名作为实参和形参。这时传给形参的是变量的值，传递是单向的。如果在执行函数期间形参的值发生变化，并不传回给实参。因为在调用函数时，形参和实参不是同一个存储单元。
    
    (2) 传递变量的指针。形参是指针变量，实参是一个变量的地址，调用函数时，形参(指针变量)指向实参变量单元。
    
    (3) C++提供了向函数传递数据的第(3)种方法，即传送变量的别名
    #include <iostream>
    using namespace std;
    int main( )
    { 
        void swap(int &,int &);
        int i=3,j=5;
        swap(i,j);
        cout<<″i=″<<i<<″  ″<<″j=″<<j<<endl;
        return 0;
    }
    
    void swap(int &a,int &b)             //形参是引用类型
    { 
        int temp;
        temp=a;
        a=b;
        b=temp;
    }
    在swap函数的形参表列中声明a和b 是整型变量的引用。
    
    
    注意：
    ① 使用引用类型就不必在swap函数中声明形参是指针变量。指针变量要另外开辟内存单元，其内容是地址。而引用变量不是一个独立的变量，不单独占内存单元，在例6.20中引用变量a和b的值的数据类型与实参相同，都是整型。
    ② 在main函数中调用swap函数时，实参不必用变量的地址(在变量名的前面加&)，而直接用变量名。系统向形参传送的是实参的地址而不是实参的值。
    这种传递方式相当于Pascal语言中的“变量形参”，显然，这种用法比使用指针变量简单、直观、方便。使用变量的引用，可以部分代替指针的操作。有些过去只能用指针来处理的问题，现在可以用引用来代替，从而降低了程序设计的难度。
    
    引用不仅可以用于变量，也可以用于对象。例如实参可以是一个对象名，在虚实结合时传递对象的起始地址。这会在以后介绍。
    当看到&a这样的形式时，怎样区别是声明引用变量还是取地址的操作呢？当&a的前面有类型符时（如int &a），它必然是对引用的声明；如果前面无类型符（如cout<<&a），则是取变量的地址。
    

23. 自定义数据类型

    23.1  结构体类型
    23.2  共用体
    23.3  枚举类型
    23.4  用typedef声明类型
    
    
    用户可以自己声明的类型还有结构体(structure)类型、共用体(union)类型、枚举(enumeration)类型、类(class)类型等，这些统称为用户自定义类型(user-defined type,UDT)。


24. 动态分配和撤销内存的运算符new和delete 

    在软件开发过程中，常常需要动态地分配和撤销内存空间，例如对动态链表中结点的插入与删除。在C语言中是利用库函数malloc和free来分配和撤销内存空间的。C++提供了较简便而功能较强的运算符new和delete来取代malloc和free函数。注意： new和delete是运算符，不是函数，因此执行效率高。虽然为了与C语言兼容，C++仍保留malloc和free函数，但建议用户不用malloc和free函数，而用new和delete运算符。

    new运算符的例子： 
    new int;         //开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针)
    new int(100);   
    //开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址

    new char[10];      //开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址
    new int[5][4];   //开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址
    float *p=new float(3.14159); //开辟一个存放单精度数的空间，并指定该实数的初值为
    //3.14159，将返回的该空间的地址赋给指针变量p

    new运算符使用的一般格式为
    new 类型 (初值)
    用new分配数组空间时不能指定初值。如果由于内存不足等原因而无法正常分配空间，则new会返回一个空指针NULL，用户可以根据该指针的值判断分配空间是否成功。
    
    
    delete运算符使用的一般格式为
    delete [ ] 指针变量
    例如要撤销上面用new开辟的存放单精度数的空间(上面第5个例子)，应该用
    delete  p；
    前面用“new char[10];”开辟的字符数组空间，如果把new返回的指针赋给了指针变量pt，则应该用以下形式的delete运算符撤销该空间： 
    delete [] pt；      //在指针变量前面加一对方括号，表示是对数组空间的操作
    




