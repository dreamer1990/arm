本次课内容:

指针(三)


1. 函数指针
	指向函数的指针

	1.1 函数指针的概念
	如果在程序中定义了一个函数，在编译时，编译系统为函数代码分配一段存储空间，这段存储空间的起始地址，称为这个函数的指针。

	可以定义一个指向函数的指针变量，用来存放某一函数的起始地址，这就意味着此指针变量指向该函数。例如：
	int (*p)(int,int);
	定义p是指向函数的指针变量，它可以指向类型为整型且有两个整型参数的函数。p的类型用int (*)(int,int)表示

	1.2 定义和使用函数指针变量

	定义指向函数的指针变量的一般形式为 
	数据类型 (*指针变量名)(函数参数表列);
	如 int (*p)(int,int);
	p = max;   对
	p = max(a,b); 错
	p + n, p++, p--等运算无意义

	2. 回调函数

	用指向函数的指针作函数参数

	指向函数的指针变量的一个重要用途是把函数的地址作为参数传递到其他函数

	指向函数的指针可以作为函数参数，把函数的入口地址传递给形参，这样就能够在被调用的函数中使用实参函数

3. 指针函数

	返回指针值的函数
	一个函数可以返回一个整型值、字符值、实型值等，也可以返回指针型的数据，即地址。其概念与以前类似，只是返回的值的类型是指针类型而已
	
	定义返回指针值的函数的一般形式为
	类型名 *函数名(参数表列);

	练习:
	有a个学生，每个学生有b门课程的成绩。要求在用户输入学生序号以后，能输出该学生的全部成绩。用指针函数实现。
	float score[ ][4]={{60,70,80,90},{56,89,67,88},{34,78,90,66}}; 

	找出其中有不及格的课程的学生及其学生号。

4. 指针数组和多级指针

	4.1 指针数组
	一个数组，若其元素均为指针类型数据，称为指针数组，也就是说，指针数组中的每一个元素都存放一个地址，相当于一个指针变量。

	4.2 指针数组定义的形式
	定义一维指针数组的一般形式为
	类型名*数组名[数组长度];
	int *p[4];
	
	指针数组比较适合用来指向若干个字符串，使字符串处理更加方便灵活
	可以分别定义一些字符串，然后用指针数组中的元素分别指向各字符串
	由于各字符串长度一般是不相等的，所以比用二维数组节省内存单元


5. main函数
	指针数组的一个重要应用是作为main函数的形参。在以往的程序中，main函数的第一行一般写成以下形式：
	int main()  或  int main(void)
	表示main函数没有参数，调用main函数时不必给出实参。
	这是一般程序常采用的形式。

    实际上，在某些情况下，main函数可以有参数，例如：
    int main(int argc,char *argv[])
    其中，argc和argv就是main函数的形参，它们是程序的“命令行参数”。
    argv是*char指针数组，数组中每一个元素(其值为指针)指向命令行中的一个字符串。

6. VT码

    缓冲区: 
        行缓冲
        全缓冲
        不缓冲





