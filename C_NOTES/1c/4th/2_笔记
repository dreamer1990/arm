本次课内容：
    函数


1. 为什么要用函数
问题：
    如果程序的功能比较多，规模比较大，把所有代码都写在 main 函数中，就会使主函数变得庞杂、头绪不清，阅读和维护变得困难。有时程序中要多次实现某一功能，就需要多次重复编写实现此功能的程序代码，这使程序冗长，不精炼

解决的方法：
    a. 用模块化程序设计的思路
    b. 采用“组装”的办法简化程序设计的过程
    c. 事先编好一批实现各种不同功能的函数
    d. 把它们保存在函数库中，需要时直接用

    函数就是功能
    每一个函数用来实现一个特定的功能
    函数的名字应反映其代表的功能
    在设计一个较大的程序时，往往把它分为若干个程序模块，每一个模块包括一个或多个
函数，每个函数实现一个特定的功能
    Ｃ程序可由一个主函数和若干个其他函数构成

    主函数调用其他函数，其他函数也可以互相调用
    同一个函数可以被一个或多个函数调用任意多次
    可以使用库函数
    可以使用自己编写的函数
    在程序设计中要善于利用函数，可以减少重复编写程序段的工作量，同时可以方便地实现模块化的程序设计

说明：
    (1) 一个Ｃ程序由一个或多个程序模块组成，每一个程序模块作为一个源程序文件。对较大的程序,一般不希望把所有内容全放在一个文件中, 而是将它们分别放在若干个源文件中，由若干个源程序文件组成一个 C 程序。这样便于分别编写、分别编译，提高调试效率。一个源程序文件可以为多个 C 程序共用。
    (2) 一个源程序文件由一个或多个函数以及其他有关内容（如预处理指令、数据声明与定义等）组成。一个源程序文件是一个编译单位，在程序编译时是以源程序文件为单位进行编译的，而不是以函数为单位进行编译的。
    (3) Ｃ程序的执行是从 main 函数开始的，如果在 main 函数中调用其他函数，在调用后
流程返回到 main 函数，在 main 函数中结束整个程序的运行。
    (4) 所有函数都是平行的，即在定义函数时是分别进行的，是互相独立的。一个函数并不从属于另一个函数，即函数不能嵌套定义。函数间可以互相调用，但不能调用 main 函数。main 函数是被操作系统调用的。
    (5) 从用户使用的角度看，函数有两种。
    库函数，它是由系统提供的，用户不必自己定义而直接使用它们。应该说明，不同的 C
语言编译系统提供的库函数的数量和功能会有一些不同，当然许多基本的函数是共同的。
    用户自己定义的函数。它是用以解决用户专门需要的函数。

    (6) 从函数的形式看，函数分两类。
    ① 无参函数。无参函数一般用来执行指定的一组操作。无参函数可以带回或不带回函数值，但一般以不带回函数值的居多。
    ② 有参函数。在调用函数时，主调函数在调用被调用函数时，通过参数向被调用函数传递数据，一般情况下，执行被调用函数时会得到一个函数值，供主调函数使用。

2. 函数的定义
    C 语言要求，在程序中用到的所有函数，必须“先定义，后使用” 同时指定函数名字、
                                      ，
    函数返回值类型、函数实现的功能以及参数的个数与类型，将这些信息通知编译系统。
    定义函数包含以下几点内容：
    a. 指定函数的名字，以便以后按名调用
    b. 指定函数类型，即函数返回值的类型
    c. 指定函数参数的名字和类型，以便在调用函数时向它们传递数据
    d. 指定函数的功能。这是最重要的，这是在函数体中解决的
    
    对于库函数，程序设计者只需用#include 指令把有关的头文件包含到本文件模块中即可
    程序设计者需要在程序中自己定义想用的而库函数并没有提供的函数

3. 函数定义的方法
    a. 定义无参函数：
    类型名 函数名(void)
    {
       函数体
    }
    b. 定义有参函数:
    类型名 函数名（形式参数表列）
    {
       函数体
    }
    c. 定义空函数
    类型名 函数名（   ）
    {
    }
    用空函数占一个位置，以后逐步扩充
    好处：程序结构清楚，可读性好，以后扩充新功能方便，对程序结构影响不大
4. 函数的调用
    函数调用的形式:
        函数名（实参表列）
    如果是调用无参函数，则“实参表列”可以没有，但括号不能省略
    如果实参表列包含多个实参，则各参数间用逗号隔开

    3 种函数调用方式：
    a. 函数调用语句
    把函数调用单独作为一个语句
    这时不要求函数带回值，只要求函数完成一定的操作

    b. 函数表达式
    函数调用出现在另一个表达式中
    如 c=max(a,b);
    这时要求函数带回一个确定的值以参加表达式的运算

    c. 函数参数
    函数调用作为另一函数调用时的实参
    如 m＝max(a,max(b,c));
    其中 max(b,c)是一次函数调用，它的值作为 max 另一次调用的实参

    函数调用时数据传递：
    a. 形式参数和实际参数：
    在调用有参函数时，主调函数和被调用函数之间有数据传递关系
    定义函数时函数名后面的变量名称为“形式参数”（简称“形参”）
    主调函数中调用一个函数时，函数名后面参数称为“实际参数”（简称“实参”）
    实际参数可以是常量、变量或表达式

    b. 实参和形参间的数据传递
    在调用函数过程中，系统会把实参的值传递给被调用函数的形参
    或者说，形参从实参得到一个值
    该值在函数调用期间有效，可以参加被调函数中的运算

    函数的调用过程：
    在定义函数中指定的形参，在未出现函数调用时，它们并不占内存中的存储单元。在发生函数调用时，函数 max 的形参被临时分配内存单元。
    调用结束，形参单元被释放
    实参单元仍保留并维持原值，没有改变
    如果在执行一个被调用函数时，形参的值发生改变，不会改变主调函数的实参的值

    函数的返回值：
    通常，希望通过函数调用使主调函数能得到一个确定的值，这就是函数值(函数的返回
值)
    a. 函数的返回值是通过函数中的 return 语句获得的。
    一个函数中可以有一个以上的 return 语句，执行到哪一个 return 语句，哪一个就起作
用
    return 语句后面的括号可以不要
    b. 函数值的类型。应当在定义函数时指定函数值的类型
    c. 在定义函数时指定的函数类型一般应该和 return 语句中的表达式类型一致
    如果函数值的类型和 return 语句中表达式的值不一致，则以函数类型为准

5. 函数的声明：
    在一个函数中调用另一个函数需要具备如下条件：
    (1) 被调用函数必须是已经定义的函数（是库函数或用户自己定义的函数）
    (2) 如果使用库函数，应该在本文件开头加相应的#include 指令
    (3) 如果使用自己定义的函数，而该函数的位置在调用它的函数后面，应该声明
    函数原型的一般形式有两种：
    如 float add(float x, float y);
       float add(float, float);
    原型说明可以放在文件的开头，这时所有函数都可以使用此函数


6. 函数的嵌套调用：
    Ｃ语言的函数定义是互相平行、独立的
    即函数不能嵌套定义,但可以嵌套调用函数
    即调用一个函数的过程中，又可以调用另一个函数
7. 函数的递归调用：
    在调用一个函数的过程中又出现直接或间接地调用该函数本身，称为函数的递归调用。
    Ｃ语言的特点之一就在于允许函数的递归调用。
    举例：
    例 7.6 有 5 个学生坐在一起
         问第 5 个学生多少岁？他说比第 4 个学生大 2 岁
         问第 4 个学生岁数，他说比第 3 个学生大 2 岁
         问第 3 个学生，又说比第 2 个学生大 2 岁
         问第 2 个学生，说比第 1 个学生大 2 岁
         最后问第 1 个学生，他说是 10 岁
         请问第 5 个学生多大
        解题思路：
        要求第５个年龄，就必须先知道第４个年龄
        要求第４个年龄必须先知道第３个年龄
        第３个年龄又取决于第２个年龄
        第２个年龄取决于第１个年龄
        每个学生年龄都比其前１个学生的年龄大２
        age(5)=age(4)+2
        age(4)=age(3)+2
        age(3)=age(2)+2
        age(2)=age(1)+2
        age(1)=10
8. 数组与函数：
     a. 数组元素作函数实参
     b. 数组名作函数参数
     除了可以用数组元素作为函数参数外，还可以用数组名作函数参数(包括实参和形参)
     用数组元素作实参时，向形参变量传递的是数组元素的值
     用数组名作函数实参时，向形参 传递的是数组首元素的地址
     c. 多维数组名作函数参数

9. 局部变量和全局变量
     局部变量；
     定义变量可能有三种情况：
         在函数的开头定义
         在函数内的复合语句内定义
         在函数的外部定义
     在一个函数内部定义的变量只在本函数范围内有效
     在复合语句内定义的变量只在本复合语句范围内有效
     在函数内部或复合语句内部定义的变量称为“局部变量”
     全局变量：
     在函数内定义的变量是局部变量，而在函数之外定义的变量称为外部变量
     外部变量是全局变量(也称全程变量)
     全局变量可以为本文件中其他函数所共用
     有效范围为从定义变量的位置开始到本源文件结束
10. 变量的存储方式和生命周期
    从变量的作用域的角度来观察，变量可以分为全局变量和局部变量
    从变量值存在的时间(即生存期)观察，变量的存储有两种不同的方式：静态存储方式和
动态存储方式

    静态存储方式是指在程序运行期间由系统分配固定的存储空间的方式
    动态存储方式是在程序运行期间根据需要进行动态的分配存储空间的方式

    每一个变量和函数都有两个属性：数据类型和数据的存储类别
    数据类型，如整型、浮点型等
    存储类别指的是数据在内存中存储的方式(如静态存储和动态存储)
    存储类别包括：
       自动的、静态的、寄存器的、外部的
    根据变量的存储类别，可以知道变量的作用域和生存期
    局部变量的存储类别:

    a. 自动变量(auto 变量)
    局部变量，如果不专门声明存储类别，都是动态地分配存储空间的
    调用函数时，系统会给局部变量分配存储空间，调用结束时就自动释放空间。因此这类
局部变量称为自动变量
    自动变量用关键字 auto 作存储类别的声明
    b. 静态局部变量(static 局部变量)
    希望函数中的局部变量在函数调用结束后不消失而继续保留原值，            即其占用的存储单元
不释放，在下一次再调用该函数时，该变量已有值(就是上一次函数调用结束时的值)，这时
就应该指定该局部变量为“静态局部变量”        ，用关键字 static 进行声明
    c. 寄存器变量(register 变量)
    一般情况下，变量（包括静态存储方式和动态存储方式）的值是存放在内存中的
    寄存器变量允许将局部变量的值放在 CPU 中的寄存器中
    现在的计算机能够识别使用频繁的变量，从而自动地将这些变量放在寄存器中，      而不需
要程序设计者指定

    全局变量都是存放在静态存储区中的。因此它们的生存期是固定的，存在于程序的整个运行过程
    一般来说，  外部变量是在函数的外部定义的全局变量，它的作用域是从变量的定义处开始，到本程序文件的末尾。在此作用域内，全局变量可以为程序中各个函数所引用。

    1). 在一个文件内扩展外部变量的作用域
    外部变量有效的作用范围只限于定义处到本文件结束。
    如果用关键字 extern 对某变量作“外部变量声明” 则可以从“声明”处起，合法地使用该外部变量

    2). 将外部变量的作用域扩展到其他文件
    如果一个程序包含两个文件，在两个文件中都要用到同一个外部变量 Num，不能分别
在两个文件中各自定义一个外部变量 Num
    应在任一个文件中定义外部变量 Num，而在另一文件中用 extern 对 Num 作“外部变量
声明”
    在编译和连接时，系统会由此知道 Num 有“外部链接” 可以从别处找到已定义的外部
                                         ，
变量 Num，并将在另一文件中定义的外部变量 num 的作用域扩展到本文件

    3). 将外部变量的作用域限制在本文件中
    有时在程序设计中希望某些外部变量只限于被本文件引用。这时可以在定义外部变量时加一个 static 声明。

11. 变量的声明和定义
    一般为了叙述方便，把建立存储空间的变量声明称定义，而把不需要建立存储空间的声明称为声明
    在函数中出现的对变量的声明(除了用 extern 声明的以外)都是定义
    在函数中对其他函数的声明不是函数的定义

12. 内部函数和外部函数
    内部函数：
    如果一个函数只能被本文件中其他函数所调用，它称为内部函数。
    在定义内部函数时，在函数名和函数类型的前面加 static，即:
        static 类型名 函数名(形参表)
    内部函数又称静态函数，因为它是用 static 声明的
    通常把只能由本文件使用的函数和外部变量放在文件的开头，前面都冠以 static 使之局
部化，其他文件不能引用
    提高了程序的可靠性
    外部函数：
    如果在定义函数时，在函数首部的最左端加关键字 extern，则此函数是外部函数，可供
其他文件调用。
    如函数首部可以为
        extern int fun (int a, int b)
    如果在定义函数时省略 extern，则默认为外部函数


