本次课内容:
	文件的基本概念
	文件的相关操作

1. 文件概述
	所谓的文件一般是指存储在外部介质上数据的集合。

	文件有不同的类型，在程序设计中，主要用到两种文件：
	(1) 程序文件。包括源程序文件(后缀为.c)、目标文件(后缀为.obj)、可执行文件(后缀为.exe)等。这种文件的内容是程序代码。
	(2) 数据文件。文件的内容不是程序，而是供程序运行时读写的数据，如在程序运行过程中输出到磁盘(或其他外部设备)的数据，或在程序运行过程中供读入的数据。如一批学生的成绩数据，或货物交易的数据等。

	我们主要讨论数据文件
	在以前各章中所处理的数据的输入和输出，从终端的键盘输入数据，运行结果输出到终端显示器上。实际上常常需要将一些数据输出到磁盘上保存起来，以后使用，这就要用到磁盘文件
	
	操作系统把各种设备都统一作为文件处理,Linux下一切皆文件
	从操作系统的角度看，每一个与主机相联的输入输出设备都看作是文件。
	例如，
	终端键盘是输入文件
	显示屏和打印机是输出文件

	“文件”指存储在外部介质上数据的集合
	一批数据是以文件的形式存放在外部介质上的
	操作系统是以文件为单位对数据进行管理
	想找存放在外部介质上的数据，先按文件名找到所指定的文件，然后再从该文件读数据
	要向外部介质上存储数据也必须先建立一个文件（以文件名作为标志），才能向它输出数据

	输入输出是数据传送的过程，数据如流水一样从一处流向另一处，因此常将输入输出形象地称为流(stream)，即数据流。流表示了信息从源到目的端的流动。


	输入操作时，数据从文件流向计算机内存
	输出操作时，数据从计算机流向文件
	无论是用Word打开或保存文件，还是C程序中的输入输出都是通过操作系统进行的
	“流”是一个传输通道，数据可以从运行环境流入程序中，或从程序流至运行环境

	从C程序的观点来看，无论程序一次读写一个字符，或一行文字，或一个指定的数据区，作为输入输出的各种文件或设备都是统一以逻辑数据流的方式出现的。Ｃ语言把文件看作是一个字符（或字节）的序列。一个输入输出流就是一个字符流或字节(内容为二进制数据)流。
	
	Ｃ的数据文件由一连串的字符（或字节）组成，而不考虑行的界限，两行数据间不会自动加分隔符，对文件的存取是以字符（字节）为单位的。输入输出数据流的开始和结束仅受程序控制而不受物理符号（如回车换行符）控制，这就增加了处理的灵活性。这种文件称为流式文件。

2. 文件名
	文件要有一个唯一的文件标识，以便用户识别和引用。
	文件标识包括三部分：
	(1)文件路径
	(2)文件名
	(3)文件后缀

	文件路径表示文件在外部存储设备中的位置。如：
    /home/test.c 表示在/home目录中有一个test.c文件
	D: \CC\temp\file1.dat
	表示file1.dat文件存放在D盘中的CC目录下的temp子目录下面

	文件后缀名一般不超过3个字母（doc、txt、dat、c、cpp、obj、exe、ppt、bmp等）

2. 文件分类
	根据数据的组织形式，数据文件可分为ASCII文件和二进制文件。
	数据在内存中是以二进制形式存储的，如果不加转换地输出到外存，就是二进制文件
	如果要求在外存上以ASCII代码形式存储，则需要在存储前进行转换
	ASCII文件又称文本文件，每一个字节放一个字符的ASCII代码

	字符一律以ASCII形式存储
	数值型数据既可以用ASCII形式存储，也可以用二进制形式存储
	如有整数10000，如果用ASCII形式输出到磁盘，则在磁盘中占５个字节(每一个字符占一个字节)，而用二进制形式输出，则在磁盘上只占4个字节(用VC++ C时)

	ASCII形式: 00110001 00110000 00110000 00110000 00110000
	二进制形式： 00000000 00000000 00100111 00010000

3. 文件缓冲区
	ANSI C标准采用“缓冲文件系统”处理数据文件
	所谓缓冲文件系统是指系统自动地在内存区为程序中每一个正在使用的文件开辟一个文件缓冲区

	从内存向磁盘输出数据必须先送到内存中的缓冲区，装满缓冲区后才一起送到磁盘去
	如果从磁盘向计算机读入数据，则一次从磁盘文件将一批数据输入到内存缓冲区（充满缓冲区），然后再从缓冲区逐个地将数据送到程序数据区（给程序变量）


4. 文件类型指针
	
	声明FILE结构体类型的信息包含在头文件“stdio.h”中
	一般设置一个指向FILE类型变量的指针变量，然后通过它来引用这些FILE类型变量


5. 文件的打开和关闭
    
	对文件读写之前应该“打开”该文件，在使用结束之后应“关闭”该文件。
	所谓“打开”是指为文件建立相应的信息区(用来存放有关文件的信息)和文件缓冲区(用来暂时存放输入输出的数据)。
	在编写程序时，在打开文件的同时，一般都指定一个指针变量指向该文件，也就是建立起指针变量与文件之间的联系，这样就可以通过该指针变量对文件进行读写
	所谓“关闭”是指撤销文件信息区和文件缓冲区 

	用fopen函数打开数据文件
	在打开一个文件时，通知编译系统以下3个信息：
	①需要访问的文件的名字
	②使用文件的方式（“读”还是“写”等）
	③让哪一个指针变量指向被打开的文件

	说明：
	(1) 用“r”方式打开的文件只能用于向计算机输入而不能用作向该文件输出数据，而且该文件应该已经存在，并存有数据，这样程序才能从文件中读数据。
	不能用“r”方式打开一个并不存在的文件，否则出错。
	
	(2) 用“w”方式打开的文件只能用于向该文件写数据（即输出文件），而不能用来向计算机输入。
	如果原来不存在该文件，则在打开文件前新建立一个以指定的名字命名的文件。
	如果原来已存在一个以该文件名命名的文件，则在打开文件前先将该文件删去，然后重新建立一个新文件。

	(3) 如果希望向文件末尾添加新的数据（不希望删除原有数据），则应该用“a”方式打开
	但此时应保证该文件已存在；否则将得到出错信息。
	打开文件时，文件读写标记移到文件末尾

	(4) 用r+、w+、a+方式打开的文件既可以用来输入数据，也可以用来输出数据。
	用r+方式时该文件应该已经存在。
	用w+方式则新建立一个文件，先向此文件写数据，然后可以读此文件中的数据。
	用a+方式打开的文件，原来的文件不被删去，文件读写位置标记移到文件末尾，可以添加，也可以读。

	(5) 如果打开失败，fopen函数将会带回一个出错信息。fopen函数将带回一个空指针值NULL

	(6) 计算机输从ASCII文件读入字符时，遇到回车换行符，系统把它转换为一个换行符，在输出时把换行符转换成为回车和换行两个字符。在用二进制文件时，不进行这种转换，在内存中的数据形式与输出到外部文件中的数据形式完全一致，一一对应。

	(7) 程序中可以使用3个标准的流文件：标准输入流、标准输出流、标准出错输出流。
	系统已对这3个文件指定了与终端的对应关系
	标准输入流是从终端的输入
	标准输出流是向终端的输出
	标准出错输出流是当程序出错时将出错信息发送到终端


	程序开始运行时系统自动打开这3个标准流文件。因此，程序编写者不需要在程序中用fopen函数打开它们。所以以前我们用到的从终端输入或输出到终端都不需要打开终端文件。

	用fclose函数关闭数据文件
	如果不关闭文件将会丢失数据。



    stdin   标准输入
    stdout  标准输出
    stderr  标准出错

	fopen
     FILE *fopen(const char *path, const char *mode); FILE *fopen(const char *path, const char *mode);
    功能: 打开一个文件

    path:  指定文件的路径(相对路径和绝对路径)
    mode:  模式
        r    只读的方式
        r+   读写方式打开一个文件
        w    只写的方式打开一个文件，如果文件存在 清空内容
        w+   读写的方式打开一个文件,如果文件存在，清空内容
        a    追加的方式打开一个文件,文件的指针指向文件末尾,如果文件不存在，就创建该文件
        a+   追加的方式打开一个文件，并且可以读，如果文件不存在，就创建该文件


	fclose
    int fclose(FILE *fp);
    功能： 关闭已经打开的文件,并且刷新缓冲区
        fp: 文件指针


6. 文件的读写
	在顺序写时，先写入的数据存放在文件中前面，后写入的数据存放在文件中后面
	在顺序读时，先读文件中前面的数据，后读文件中后面的数据
	对顺序读写来说，对文件读写数据的顺序和数据在文件中的物理顺序是一致的 
	顺序读写需要用库函数实现

	fputc
    int fputc(int c, FILE *stream);
        功能：写一个字符到指定文件中
            c: 就是要写的字符
            stream: 文件指针
    
	fgetc
    int fgetc(FILE *stream);
        功能：从指定的文件中读取一个字符,错误就返回EOF
            stream: 文件指针 


	feof  
    int feof(FILE *stream);
	    功能: 如果文件结束，函数feof的返回值为真，否则为假
            stream:  文件指针

	练习:
	例1 从键盘输入一些字符，逐个把它们送到磁盘上去，直到用户输入一个“＃”为止
	例2 将一个磁盘文件中的信息复制到另一个磁盘文件中。 今要求将上例建立的file1.dat文件中的内容复制到另一个磁盘文件file2.dat中。

7. 向文件读写一个字符串

	fgets
        char *fgets(char *s, int size, FILE *stream);
        功能:   从指定文件指针中读取一串字符
            s:      保存字符的buf
            size：  读取多少个字节
            stream: 文件指针

	fputs
        int fputs(const char *s, FILE *stream);
            功能： 将字符串s输出到stream指定的文件中
                s:      字符串buf
                stream: 文件指针

	说明：
	fgets(str,n,fp);中n是要求得到的字符个数，但实际上只读n-1个字符，然后在最后加一个’\0’字符，这样得到的字符串共有n个字符，把它们放到字符数组str中
	如果在读完n-1个字符之前遇到换行符“\n”或文件结束符EOF，读入即结束，但将所遇到的换行符“\n”也作为一个字符读入
	执行fgets成功，返回str数组首地址，如果一开始就遇到文件尾或读数据错，返回NULL


	fputs函数的函数原型为：
    	int fputs (char *str, FILE *fp);
    	str指向的字符串输出到fp所指向的文件中
    	调用时可以写成： fputs(″China”,fp);

    	fputs函数中第一个参数可以是字符串常量、字符数组名或字符型指针
    	字符串末尾的′\0′不输出
    	输出成功，函数值为非负；失败，函数值为EOF

8. 用格式化的方式读写文件
	fprintf
        int fprintf(FILE *stream, const char *format, ...);
        功能： 同printf相似,只不过它是向指定的stream输出
        
            stream: 文件指针
            format: 格式控制
            ...：   变参
        返回值：成功打印字符的个数
            
	fscanf
        int fscanf(FILE *stream, const char *format, ...);
        功能: 同scanf，只不过它是向指定的stream输入

            stream: 文件指针
            format: 格式控制
            ...：   变参
        返回值：成功获取参数的个数



9. 用二进制方式读写文件

	读写结构体

	fread
    size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
        功能： 读取nmemb个数据,每个数据的大小为size个, 从指定的stream读取, 保存到ptr中 
            ptr:    保存数据的buf
            size:   每个数据的大小   
            nmemb:  读取多少个数据
            stream: 文件指针


	fwrite
     size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);
        功能: 写数据到文件中
            ptr:   要写的数据buf
            size:   每个数据的大小   
            nmemb:  读取多少个数据
            stream: 文件指针

	总的来说
	    buffer：是一个地址
	    对fread来说，它是用来存放从文件读入的数据的存储区的地址
	    对fwrite来说，是要把此地址开始的存储区中的数据向文件输出
	    size：要读写的字节数
	    count：要读写多少个数据项
	    fp：FILE类型指针

10.随机读写数据文件

	对文件进行顺序读写比较容易理解，也容易操作，但有时效率不高
	随机访问不是按数据在文件中的物理位置次序进行读写，而是可以对任何位置上的数据进行访问，显然这种方法比顺序访问效率高得多

	(1).文件位置标记
	为了对读写进行控制，系统为每个文件设置了一个文件读写位置标记(简称文件标记)，用来指示“接下来要读写的下一个字符的位置”

	一般情况下，在对字符文件进行顺序读写时，文件标记指向文件开头，进行读的操作时，就读第一个字符，然后文件标记向后移一个位置，在下一次读操作时，就将位置标记指向的第二个字符读入。依此类推，直到遇文件尾，结束

	如果是顺序写文件，则每写完一个数据后，文件标记顺序向后移一个位置，然后在下一次执行写操作时把数据写入指针所指的位置。直到把全部数据写完，此时文件位置标记在最后一个数据之后

	可以根据读写的需要，人为地移动了文件标记的位置。文件标记可以向前移、向后移，移到文件头或文件尾，然后对该位置进行读写——随机读写
	随机读写可以在任何位置写入数据，在任何位置读取数据

	(2). 文件位置标记的定位
	可以强制使文件位置标记指向指定的位置
	可以用以下函数实现：
	
	
	rewind
       void rewind(FILE *stream);  
       功能： 将文件的指针指向文件开始的地方
        
	fseek
        int fseek(FILE *stream, long offset, int whence);
        功能： 重新定位文件指针
        stream: 文件指针
        offset: 偏移量
        whence: 从哪里开始
            SEEK_SET    文件开始的地方
            SEEK_CUR    文件当前位置
            SEEK_END    文件结束的地方

	ftell
     long ftell(FILE *stream);
     功能： 返回当前文件指针在文件中的地方
     
        
	练习:
	  例5 有一个磁盘文件，内有一些信息。要求第一次将它的内容显示在屏幕上，第二次把它复制到另一文件上。


11. 文件读写的出错检测

	ferror函数的一般调用形式为
	ferror(fp); 
	如果返回值为0，表示未出错，否则表示出错
	每次调用输入输出函数，都产生新的ferror函数值，因此调用输入输出函数后立即检查
	调用fopen时，ferror的初始值自动置为0

	clearerr函数
	作用是使文件错误标志和文件结束标志置为0
	调用一个输入输出函数时出现错误（ferror值为非零值），立即调用clearerr(fp)，使ferror(fp)值变0，以便再进行下一次检测
	只要出现文件读写错误标志，它就一直保留，直到对同一文件调用clearerr函数或rewind函数，或任何其他一个输入输出函数


	ferror
		返回一个非零值，表示出错，对同一个文件每一次调用输入输出函数，均产生一个新的ferror的值，因此我们在调用一个输入输出函数后立即检查ferror函数的值，否则信息会丢失。

		在执行fopen函数的时候ferror函数的初始值自动置为0

	clearerr
		是文件的错误标识和文件结束标识置为0




